@page "/CreateTicket"
@attribute [Authorize]
@using TicketSystem.Data
@using Microsoft.AspNetCore.Http
@using TicketSystem.Utility
@using BlazorInputFile
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Components.Forms
@inject ITicketService ticketService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor httpContextAccessor
@inject IImageUploadService imageUploadService
@inject IWebHostEnvironment webHostEnvironment

<h3>Create New Ticket</h3>

<div class="createTicketContainer">
    <EditForm Model="@ticket" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-group row">
            <label for="Title" class="col-sm-2 col-form-label">Title</label>
            <div class="col-sm-10">
                <InputText id="title" class="form-control" placeholder="Title" @bind-Value="ticket.Title" />
                <ValidationMessage For="@(() => ticket.Title)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Content" class="col-sm-2 col-form-label">Content</label>
            <div class="col-sm-10">
                <InputTextArea id="content" class="form-control" placeholder="Content" @bind-Value="ticket.Content" />
                <ValidationMessage For="@(() => ticket.Content)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Visibility" class="col-sm-2 col-form-label">Visible to</label>
            <div class="col-sm-10">
                <InputSelect @bind-Value="@ticket.Visibility" class="form-control">
                    <option value="0">Only me</option>
                    <option value="1">Everyone</option>
                </InputSelect>
            </div>
        </div>
        <div class="form-group row">
            <label for="RefersTo" class="col-sm-2 col-form-label">Refers To</label>
            <div class="col-sm-10">
                <InputSelect id="RefersTo" @bind-Value="@ticket.RefersTo" class="form-control">
                    <option value="OfficeSupport" selected="selected">OfficeSupport</option>
                    <option value="TechSupport">TechSupport</option>
                </InputSelect>
            </div>
        </div>
        <div class="form-group row">
            <div class="col-sm-10">
                <div class="@hideUploadButton uploadImageButtonCreateTicket btn btn-outline-primary">
                    <BlazorInputFile.InputFile OnChange="HandleFileSelected" />Upload Image
                </div>
                <div class="@uploadImagePreviewStyle">
                    @msImage
                </div>
                <button type="button" class="@hideClearButton createTicketClearImageButton btn btn-outline-primary" @onclick="ClearImage">Clear Image</button>
            </div>
        </div>
        <div class="form-group row">
            <div class="col-sm-10">
                <input type="submit" class="btn btn-outline-primary" value="Save" />
                <input type="button" class="btn btn-outline-primary" @onclick="Cancel" value="Cancel" />
            </div>
        </div>
    </EditForm>
</div>

@code {
    Ticket ticket = new();
    IFileListEntry file;
    MarkupString msImage;
    string randomFileName = string.Empty;
    string uploadImagePreviewStyle = string.Empty;
    string hideUploadButton = string.Empty;
    string hideClearButton = "hideTheButton";

    //Temporary fix
    protected override void OnInitialized()
    {
        ticket.RefersTo = "OfficeSupport";
    }

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            randomFileName = Utility.RandomGenerator.GenerateRandomFileName(file.Name.Substring(file.Name.LastIndexOf(".")));
            await imageUploadService.UploadAsync(file, randomFileName);
            uploadImagePreviewStyle = "createTicketUploadImage";
            msImage = (MarkupString)("<p>Attached Image</p><img src=" + "/Images/" + randomFileName + " alt=\"Uploaded image\" width=\"300\" />");
            hideClearButton = string.Empty;
            hideUploadButton = "hideTheButton";
        }
    }

    async void HandleValidSubmit()
    {
        ticket.UserId = httpContextAccessor.HttpContext.User.GetUserId();
        ticket.ImageUrl = randomFileName;
        await ticketService.CreateTicket(ticket);
        NavigationManager.NavigateTo("Tickets");
    }

    void ClearImage()
    {
        msImage = (MarkupString)string.Empty;
        uploadImagePreviewStyle = string.Empty;
        randomFileName = string.Empty;
        hideUploadButton = string.Empty;
        hideClearButton = "hideTheButton";
        StateHasChanged();
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("Tickets");
    }
}