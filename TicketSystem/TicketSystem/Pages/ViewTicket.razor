@page "/ViewTicket/{Id}"
@attribute [Authorize]
@using TicketSystem.Data
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Utility;
@inject ITicketService ticketService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor httpContextAccessor
@inject UserManager<AspNetUser> userManager
@inject IUserService userService
@inject IMessageService messageService
@inject IJSRuntime js
@inject IImageUploadService imageUploadService
<h3>@ticket.Title</h3>

<AuthorizeView Roles="OfficeSupport, TechSupport">
    <Authorized>
        @if (ticket.RefersTo != loggedInUser.Role && ticket.Visibility == 1)
        {
            NavigationManager.NavigateTo("Tickets");
        }
        <div class="maincontainer">
            <div>
                <b>Author:</b> @author.Firstname @author.Lastname (@author.UserName)
            </div>
            <div>
                <div>
                    <textarea readonly rows="20" cols="120" class="form-control">@ticket.Content</textarea>
                </div>
                <div class="ticketImage">
                    @if (ticket.ImageUrl != string.Empty)
                    {
                        <img src="/Images/@ticket.ImageUrl" alt="Attached image" width="300" />
                    }
                </div>
            </div>
            <hr class="my-2" />
            <section class="discussion">
                @foreach (Message message in messages)
                {
                    if ((loggedInUser.Role == "OfficeSupport" && ticket.RefersTo == "OfficeSupport")
                        || (loggedInUser.Role == "TechSupport" && ticket.RefersTo == "TechSupport")
                        || ticket.Visibility == 2)
                    {
                        if (message.UserId != author.Id)
                        {
                            if (message.Type == 0)
                            {
                <div class="bubble sender">
                    @if (prevUser != message.UserId)
                    {<div class="letterCircle">@userService.GetUser(message.UserId).Firstname[0]</div>}@message.Content
                </div>
                            }
                            else
                            {
            <div class="imageResizeSender">
                @if (prevUser != message.UserId)
                {<div class="letterCircle">@userService.GetUser(message.UserId).Firstname[0]</div>}<img src="/Images/@message.ImageUrl" class="messageImage"/>
                                        </div>
                            }
                        }
                        else
                        {
                            if (message.Type == 0)
                            {
            <div class="bubble recipient">
                @if (prevUser != message.UserId)
                {<div class="letterCircle">@userService.GetUser(message.UserId).Firstname[0]</div>}@message.Content
            </div>
                            }
                            else
                            {
            <div class="imageResizeRecipient">
                @if (prevUser != message.UserId)
                {<div class="letterCircle">@userService.GetUser(message.UserId).Firstname[0]</div>}<img src="/Images/@message.ImageUrl" class="messageImage"/>
                                        </div>
                            }
                        }
                    }
                    prevUser = message.UserId;
                }
            </section>
            @if (loggedInUser.Role == ticket.RefersTo || ticket.Visibility == 2)
            {
                <div class="messageBoxes">
                    <textarea class="blockedresizing form-control" @bind="message.Content" rows="4" cols="120"></textarea>
                    <button class="btn btn-outline-primary" @onclick="SendMessage" value="Send">Send</button>
                    <InputFile class="btn btn-outline-primary" OnChange="SendMessageImage"></InputFile>
                </div>
            }
        </div>
    </Authorized>
</AuthorizeView>
<AuthorizeView Roles="Junior, Senior, MidLevel">
    <Authorized>
        <div class="maincontainer">
            <div>
                <b>Author:</b> @author.UserName (@author.Firstname @author.Lastname)
            </div>
            <div>
                <div>
                    <textarea readonly rows="20" cols="120" class="form-control">@ticket.Content</textarea>
                </div>
                <div class="ticketImage">
                    @if (ticket.ImageUrl != string.Empty)
                    {
                        <p>Attached image</p>
                        <img src="/Images/@ticket.ImageUrl" alt="Attached image" width="300"  />
                    }
                </div>
            </div>
            <hr class="my-2" />
            <section class="discussion">
                @if (messages != null)
                {
                    @foreach (Message message in messages)
                    {
                        if (message.UserId == author.Id)
                        {
                            if (message.Type == 0)
                            {
                                <div class="bubble sender">@if (prevUser != message.UserId)
                                {<div class="letterCircle">@userService.GetUser(message.UserId).Firstname[0]</div>}@message.Content</div>
                            }
                            else
                            {
                                <div class="imageResizeSender">@if (prevUser != message.UserId) 
                                {<div class="letterCircle">@userService.GetUser(message.UserId).Firstname[0]</div>} <img src="/Images/@message.ImageUrl" class="messageImage"/></div>
                            }
                        }
                        else
                        {
                            if (message.Type == 0)
                            {
                                <div class="bubble recipient">@if (prevUser != message.UserId)
                                {<div class="letterCircle">@userService.GetUser(message.UserId).Firstname[0]</div>}@message.Content</div>
                            }
                            else
                            {
                                <div class="imageResizeRecipient">@if (prevUser != message.UserId)
                                {<div class="letterCircle">@userService.GetUser(message.UserId).Firstname[0]</div>}<img src="/Images/@message.ImageUrl" class="messageImage"/></div>
                            }
                        }
                        prevUser = message.UserId;
                    }
                }
            </section>
            @if (loggedInUser.Id == author.Id || ticket.Visibility == 2)
            {
                <div class="messageBoxes">
                    <textarea class="blockedresizing form-control" @bind="message.Content" rows="4" cols="120"></textarea>
                    <button class="btn btn-outline-primary" @onclick="SendMessage" value="Send">Send</button>
                    <InputFile class="btn btn-outline-primary" OnChange="SendMessageImage"></InputFile>
                </div>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public string Id { get; set; }
    Ticket ticket = new();
    AspNetUser loggedInUser = new();
    AspNetUser author = new();
    List<Message> messages = new();
    Message message = new();
    IFileListEntry file;
    string prevUser;

    private Task<AspNetUser> GetCurrentUserAsync() => userManager.GetUserAsync(httpContextAccessor.HttpContext.User);

    protected override async Task OnInitializedAsync()
    {
        ticket = ticketService.GetTicket(Convert.ToInt32(Id));
        author = userService.GetUser(ticket.UserId);
        loggedInUser = await Task.Run(() => GetCurrentUserAsync());
        messages = messageService.GetAllMessages();
        messages = messages.Where(m => m.Ticket.TicketId == ticket.TicketId).ToList();
    }
    private void NavigateToTickets()
    {
        NavigationManager.NavigateTo("/Tickets/");
    }
    protected void SendMessage()
    {
        message.Ticket = ticket;
        message.UserId = loggedInUser.Id;
        message.Type = 0;
        message.ImageUrl = null;
        if (messageService.CreateMessage(message))
        {
            messages = messageService.GetAllMessages().Where(m => m.Ticket.TicketId == ticket.TicketId).ToList();
            message = new();
            StateHasChanged();
        }
    }
    async Task SendMessageImage(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            string randomFileName = RandomGenerator.GenerateRandomFileName(file.Name.Substring(file.Name.LastIndexOf(".")));
            message.Ticket = ticket;
            message.UserId = loggedInUser.Id;
            message.Type = 1;
            message.ImageUrl = randomFileName;
            await imageUploadService.UploadAsync(file, randomFileName);
            if (messageService.CreateMessage(message))
            {
                messages = messageService.GetAllMessages().Where(m => m.Ticket.TicketId == ticket.TicketId).ToList();
                message = new();
                StateHasChanged();
            }
        }
    }
}