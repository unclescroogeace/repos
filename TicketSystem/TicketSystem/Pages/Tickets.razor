@page "/Tickets"
@attribute [Authorize]
@using TicketSystem.Data
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@inject ITicketService ticketService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor httpContextAccessor
@inject UserManager<AspNetUser> userManager
@inject IUserService userService
<h1>Tickets</h1>
<AuthorizeView Roles="Junior, Senior, MidLevel">
    <Authorized>
        <button class="btn btn-outline-primary" id="createButton" @onclick="NavigateToCreateTicket">Create New</button><br /><br />
    </Authorized>
</AuthorizeView>
@if (TicketList is null)
{
    <p><em>Loading.... !</em></p>
}

<table class="table">
    <thead class="thead-light">
        <tr>
            <th scope="col">Title</th>
            <th scope="col">Author</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var ticket in TicketList)
        {
            if (ticket.Visibility == 2 || ticket.UserId == loggedInUser.Id || ticket.RefersTo == loggedInUser.Role)
            {
                authorInfo = userService.GetUser(ticket.UserId);
                <tr>
                    <td><a href="/ViewTicket/@ticket.TicketId">@ticket.Title</a></td>
                    <td>@authorInfo.Firstname @authorInfo.Lastname</td>
                </tr>
            }
        }
    </tbody>
</table>

@code{
    List<Ticket> TicketList = new();
    AspNetUser loggedInUser = new();
    AspNetUser authorInfo = new();


    private Task<AspNetUser> GetCurrentUserAsync() => userManager.GetUserAsync(httpContextAccessor.HttpContext.User);

    protected override async Task OnInitializedAsync()
    {
        TicketList = await Task.Run(() => ticketService.GetAllTicketsAsync());
        loggedInUser = await Task.Run(() => GetCurrentUserAsync());
    }

    private void NavigateToCreateTicket()
    {
        NavigationManager.NavigateTo("/CreateTicket");
    }
}