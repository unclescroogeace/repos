@page "/Tickets"
@attribute [Authorize]
@using TicketSystem.Data
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@inject ITicketService ticketService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor httpContextAccessor
@inject UserManager<AspNetUser> userManager
@inject IUserService userService
<h1>Tickets</h1>
<AuthorizeView Roles="Junior, Senior, MidLevel">
    <Authorized>
        <button class="btn btn-primary" @onclick="NavigateToCreateTicket">Create New</button>
    </Authorized>
</AuthorizeView>
@if (TicketList is null)
{
    <p><em>Loading.... !</em></p>
}

<table>
    <thead>
        <tr>
            <th>Id</th>
            <th>Title</th>
            <th>Visibility</th>
            <th>RefersTo</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var ticket in TicketList)
        {
            if (ticket.Visibility == 1 || ticket.UserId == loggedInUser.Id || ticket.RefersTo == loggedInUser.Role)
            {
                <tr>
                    <td>@ticket.TicketId</td>
                    <td><a href="/ViewTicket/@ticket.TicketId">@ticket.Title</a></td>
                    <td>@ticket.Visibility</td>
                    <td>@ticket.RefersTo</td>
                    <td>
                        @*<a class="nav-link" href="EditEmployee/@emp.Id">*@
                        <a class="nav-link" href="#">
                            <span class="oi oi-pencil" aria-hidden="true">Edit</span>
                        </a>
                        <a class="nav-link" href="#">
                            <span class="oi oi-trash" aria-hidden="true">Delete</span>
                        </a>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code{
    List<Ticket> TicketList = new();
    AspNetUser loggedInUser = new();


    private Task<AspNetUser> GetCurrentUserAsync() => userManager.GetUserAsync(httpContextAccessor.HttpContext.User);

    protected override async Task OnInitializedAsync()
    {
        TicketList = await Task.Run(() => ticketService.GetAllTicketsAsync());
        loggedInUser = await Task.Run(() => GetCurrentUserAsync());

    }

    private void NavigateToCreateTicket()
    {
        NavigationManager.NavigateTo("/createticket");
    }

}